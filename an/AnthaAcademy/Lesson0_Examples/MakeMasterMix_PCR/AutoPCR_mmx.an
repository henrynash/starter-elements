// Perform multiple PCR reactions with common default parameters 
protocol AutoPCR_mmx_demo

import (
"github.com/antha-lang/antha/antha/anthalib/wtype"
//"github.com/antha-lang/antha/antha/anthalib/thermocycle"


)

// Input parameters for this protocol (data)
Parameters (
// PCRprep parameters
Projectname string
Reactiontotemplate map[string]string // map of which reaction uses which template e.g. ["left homology arm"]:"templatename"
Reactiontoprimerpair map[string][2]string // map of which reaction uses which primer pair e.g. ["left homology arm"]:"fwdprimer","revprimer"
DefaultTemplateVol Volume // Volume of template in each reaction
DefaultBufferConcinX int // e.g. for  10X Q5 buffer this would be 10
DefaultPrimerVolume Volume 
DefaultPolymeraseVolume Volume
DefaultMasterMixVolume Volume
PrimersalreadyAddedtoMasterMix bool
PolymeraseAlreadyaddedtoMastermix bool
)

// Data which is returned from this protocol, and data types
Data (
	Errors []error // return an error message if an error is encountered
)


// Physical Inputs to this protocol with types
Inputs (
FwdPrimertype *wtype.LHComponent
RevPrimertype *wtype.LHComponent
Templatetype *wtype.LHComponent
DefaultPolymerase *wtype.LHComponent
MasterMix *wtype.LHComponent
Plate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
Reactions []*wtype.LHComponent
ReactionMap map[string]*wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	// set up a counter to use as an index for increasing well position 
	var counter int
	
	
	// set up some empty slices to fill as we iterate through the reactions
	Reactions = make([]*wtype.LHComponent,0)
	volumes := make([]wunit.Volume,0)
	welllocations := make([]string,0)
	// initialise map
	ReactionMap = make(map[string]*wtype.LHComponent)

 	
	for reactionname, templatename := range Reactiontotemplate {
	
	// use counter to find next available well position in plate
	
	var allwellpositionsforplate []string 
	
	allwellpositionsforplate =  Plate.AllWellPositions(wtype.BYCOLUMN)
	
	wellposition := allwellpositionsforplate[counter]
	
	// handle to set up thermocycler
 	//MasterMix = Handle(thermocycle.SetUp(MasterMix))
	
	// Run PCR_vol element
	result := RunSteps(PCR_vol_mmx,
        Parameters{
        	MasterMixVolume: DefaultMasterMixVolume,
			PrimersalreadyAddedtoMasterMix: PrimersalreadyAddedtoMasterMix,
			PolymeraseAlreadyaddedtoMastermix: PolymeraseAlreadyaddedtoMastermix,
			FwdPrimerName: Reactiontoprimerpair[reactionname][0],
			RevPrimerName: Reactiontoprimerpair[reactionname][1],
			TemplateName: templatename,
	 		ReactionName: reactionname,
	          FwdPrimerVol: DefaultPrimerVolume,
	          RevPrimerVol: DefaultPrimerVolume,
	         PolymeraseVolume:DefaultPolymeraseVolume,
	          Templatevolume: DefaultTemplateVol,
	          Numberofcycles: 1 ,
	          InitDenaturationtime: wunit.NewTime(30,"s"),
	          Denaturationtime: wunit.NewTime(5,"s"),
	          Annealingtime: wunit.NewTime(10,"s"),
	          AnnealingTemp: wunit.NewTemperature(72,"C"), // Should be calculated from primer and template binding
	          Extensiontime: wunit.NewTime(60,"s"), // should be calculated from template length and polymerase rate
	          Finalextensiontime: wunit.NewTime(180,"s"),
				WellPosition: wellposition,
     		}, Inputs{
          		FwdPrimer:FwdPrimertype,
          		RevPrimer: RevPrimertype,
         
          		PCRPolymerase:DefaultPolymerase,
          		MasterMix: MasterMix,
          	
          		Template: Templatetype,
          
          		OutPlate: Plate,
                        
                })

	// add result to reactions slice
    Reactions = append(Reactions, result.Outputs.Reaction)
    volumes = append(volumes,result.Outputs.Reaction.Volume())
	welllocations = append(welllocations,wellposition)
	ReactionMap[reactionname]= result.Outputs.Reaction
	
	
	// increase counter by 1 ready for next iteration of loop
	counter++
	
    }
	
	// once all values of loop have been completed, export the plate contents as a csv file
	Errors = append(Errors,wtype.ExportPlateCSV(Projectname+".csv", Plate,Projectname+"outputPlate", welllocations, Reactions, volumes) )
	
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}