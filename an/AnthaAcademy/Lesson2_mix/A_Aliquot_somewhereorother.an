// example protocol showing the highest level antha mix command which does not specify a plate type, therefore leaving it up to the scheduler to decide
protocol Aliquot_somewhere


// we can import code libraries and use functions and types from these libraries
import (
	"github.com/antha-lang/antha/antha/anthalib/wtype" // the LHComponent type is imported from this library
	"github.com/antha-lang/antha/antha/anthalib/wutil"
	"github.com/antha-lang/antha/antha/anthalib/mixer" // the Sample function is imported from mixer
)


// Input parameters for this protocol (data)
Parameters (
	SolutionVolume Volume
	VolumePerAliquot  Volume
	NumberofAliquots int
)

// Data which is returned from this protocol, and data types
Data (
	
)


// Physical Inputs to this protocol with types
Inputs (
	Solution *wtype.LHComponent
)

// Physical outputs from this protocol with types
Outputs (
	Aliquots []*wtype.LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	
	
	// First check that we can make enough aliquots of this volume
	number := SolutionVolume.SIValue()/VolumePerAliquot.SIValue()
	possiblenumberofAliquots, _ := wutil.RoundDown(number)
	if possiblenumberofAliquots < NumberofAliquots {
		Errorf("Not enough solution for this many aliquots")
	}
	
	
	// make a slice of components which we'll fill with aliquots; 
	// same as we would for an array of samples but this time we won't mix together
	aliquots := make([]*wtype.LHComponent,0)
	
	// this is golang syntax for a for loop
	// variable i is initialised at 0 and will increase with each loop whilst i < NumberofAliquots is still true
	
	for i := 0; i < NumberofAliquots; i++ { 
		
		// this is golang syntax for if statements
		// here we're checking if the liquid type is "dna" and if so we're changing the type 
		// to ensure risk of cross contamination is completely avoided the dna liquid type does not allow multipipetting
		// in this case where we're just aliquoting the same dna into multiple destinations we can override this by changing the liquid type
		if Solution.TypeName() == "dna"{
		Solution.Type = wtype.LTDoNotMix
		}
		aliquotSample := mixer.Sample(Solution, VolumePerAliquot)
		aliquot := Mix(aliquotSample)
		
		// this time we append the slice of components after mixing
		aliquots = append(aliquots,aliquot)
	}
	
	// Now we assign our temporary variable aliqouts to export as a variable as specified in Outputs
	// In Antha the first letter of a variablename must be uppercase to allow the variable to be exported
	Aliquots = aliquots 
}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed 
//correctly. Optionally, destructive tests can be performed to validate 
//results on a dipstick basis
Validation {
	
}
