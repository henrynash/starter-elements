// example protocol showing how the MixTo command can be used to specify different plates of the same type  i.e. plate 1 ,2, 3 of type greiner384 
protocol Aliquot_SamePositionsMultipleplates

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
)


// Input parameters for this protocol (data)
Parameters (
	SolutionVolume Volume
	VolumePerAliquot  Volume
	Positions []string // positions on each plate to add aliquots
	NumberofPlates int // number of plates to fill aliquots into
	OutPlate string
)

// Data which is returned from this protocol, and data types
Data (
	
)


// Physical Inputs to this protocol with types
Inputs (
	Solution *wtype.LHComponent
)

// Physical outputs from this protocol with types
Outputs (
	Aliquots []*wtype.LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
		
	aliquots := make([]*wtype.LHComponent,0)
	
	// this time round we're going to change the platenumber with each loop until we reach NumberofPlates specified in parameters
	// note that we're starting counting from 1 instead of zero since a platenumber of 0 is an invalid entry into MixTo
	// to ensure we reach the correct number or plates to aliquot to we also therefore need to change the evaluation condition to platenumber < (NumberofPlates +1) rather than platenumber < NumberofPlates
	// alternatively we could have changed the evaluation condition to platenumber <= NumberofPlates
	for platenumber := 1; platenumber < (NumberofPlates +1); platenumber++ {
		
		// for each plate we will aliquot to every position specified in the parameters
		// this introduces an alternative syntax for looping through an array using the range keyword
		// a position in the slice Positions can alternatively be accessed with the range command by 
		// (i) using the index of which position is required, e.g. Positions[0],Positions[1],Positions[i]
		// using the range syntax this would look like this:
		// for i := range Positions {
		// aliquot := MixTo(OutPlate,Positions[i],platenumber,aliqiotSample)
		// }
		// in that case i starts at 0 and increases by 1 with each loop finishing at len(Positions)
		//(ii) the method as shown below where we use a temporary variable name position for each value of the slice and ignore the index by using the underscore _,
		for _, position := range Positions {
		if Solution.TypeName() == "dna"{
		Solution.Type = wtype.LTDoNotMix
		}
		aliquotSample := mixer.Sample(Solution, VolumePerAliquot)
		// position and platenumber are termporary variables filled in and updated per loop
		aliquot := MixTo(OutPlate, position, platenumber,aliquotSample)
		aliquots = append(aliquots,aliquot)
		}
	}
	Aliquots = aliquots
}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed 
//correctly. Optionally, destructive tests can be performed to validate 
//results on a dipstick basis
Validation {
	
}
