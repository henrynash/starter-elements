// this protocol will set up a specified number of reactions one component at a time, i.e. in the following format:
// add component 1 into reaction 1 location, 
// add component 1 into reaction 2 location, 
// add component 1 into reaction n location,
// add component 2 into reaction 1 location, 
// add component 2 into reaction 2 location, 
// add component 2 into reaction n location,
// add component x into reaction 1 location, 
// add component x into reaction 2 location, 
// add component x into reaction n location,
protocol SetupReactions

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
)


// Input parameters for this protocol (data)
Parameters (
	TotalVolume Volume
	EnzymeVolume  Volume
	SubstrateVolume Volume
	NumberofReactions int
)

// Data which is returned from this protocol, and data types
Data (
	Status string
)


// Physical Inputs to this protocol with types
Inputs (
	Buffer *wtype.LHComponent
	Substrate *wtype.LHComponent
	Enzyme *wtype.LHComponent
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Reactions []*wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	reactions := make([]*wtype.LHComponent,0)
	
	
	for i := 0; i < NumberofReactions; i++ {
		
		bufferSample := mixer.SampleForTotalVolume(Buffer, TotalVolume)
		
		buffer := MixInto(OutPlate, "", bufferSample)
		
		subSample := mixer.Sample(Substrate, SubstrateVolume)
		
		// this will Mix subSample into buffer
		subplusbuffer := Mix(buffer,subSample)
		
		enzSample := mixer.Sample(Enzyme, EnzymeVolume)
		
		// by separating each reaction into 3 mix commands when the reactions are pipetted out in parallel at runtime
		// the scheduler will try to optimise each mix step and will hence look for where components are shared between 
		// parallel threads to take advantage of things like tip reuse and multipipetting (if the liquid class permits these)
		reaction := Mix(subplusbuffer,enzSample)
		
		reactions = append(reactions,reaction)
		
	}
	Reactions = reactions
	
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
