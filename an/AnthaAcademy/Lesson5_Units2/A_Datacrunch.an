//Some examples functions
// Calculate rate of reaction, V, of enzyme displaying Micahelis-Menten kinetics with Vmax, Km and [S] declared
// Calculating [S] and V from g/l concentration and looking up molecular weight of named substrate
// Calculating [S] and V from g/l concentration of DNA of known sequence
// Calculating [S] and V from g/l concentration of Protein product of DNA of known sequence

protocol Datacrunch

import (
	"fmt"
	//"math"
	//"github.com/antha-lang/antha/antha/anthalib/wunit"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/sequences"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Pubchem"
)
// Input parameters for this protocol
Parameters (
	Km float64 //Amount
	Kmunit string // i.e. Moles, M
	
	Vmax float64
	Vmaxunit string
	
	Vunit string
	
	S float64 //Amount
	Sunit string

	SubstrateConc Concentration
	SubstrateVol Volume
	Substrate_name string
	
	DNAConc Concentration
	DNA_seq string
	Gene_name string
	ProteinConc Concentration
)

// Data which is returned from this protocol
Data (
	
	V float64
	Orftrue bool
	Status string
)

// Physical inputs to this protocol
Inputs (

)

// Physical outputs from this protocol
Outputs (
)

Requirements {

}

// Actions to perform before protocol itself
Setup {

}

// Core process of the protocol: steps to be performed for each input
Steps {
	// Work out rate of reaction, V of enzyme with Michaelis-Menten kinetics and [S], Km and Vmax declared
	//Using declared values for S and unit of S
	km := wunit.NewAmount(Km,Kmunit) //.SIValue()
	s := wunit.NewAmount(S,Sunit) //.SIValue()
	
	V = ((s.SIValue()*Vmax)/(s.SIValue()+km.SIValue()))
	
	// Now working out Molarity of Substrate based on conc and looking up molecular weight in pubchem
	
	// Look up properties 
	substrate_mw, err := pubchem.MakeMolecule(Substrate_name)
        if err != nil {
                Errorf(err.Error())
        }
	
	// calculate moles
	submoles := sequences.Moles(SubstrateConc, substrate_mw.MolecularWeight, SubstrateVol)
	// calculate molar concentration
	submolarconc := sequences.GtoMolarConc(SubstrateConc,substrate_mw.MolecularWeight)
	
	// make a new amount
	s = wunit.NewAmount(submolarconc,"M")
	
	// use michaelis menton equation
	v_substrate_name := ((s.SIValue()*Vmax)/(s.SIValue()+km.SIValue()))
	
	// Now working out Molarity of Substrate from DNA Sequence
	// calculate molar concentration
	dna_mw := sequences.MassDNA(DNA_seq,false,false)
	dnamolarconc := sequences.GtoMolarConc(DNAConc,dna_mw)
	
	// make a new amount
	s = wunit.NewAmount(dnamolarconc,"M")
	
	// use michaelis menton equation
	v_dna := ((s.SIValue()*Vmax)/(s.SIValue()+km.SIValue()))
	
	// Now working out Molarity of Substrate from Protein product of dna Sequence
	
	// translate
	orf,orftrue := sequences.FindORF(DNA_seq)
	var protein_mw float64
	if orftrue == true {
	protein_mw_kDA := sequences.Molecularweight(orf)
	protein_mw = protein_mw_kDA*1000
	Orftrue = orftrue
	}
	
	// calculate molar concentration
	proteinmolarconc := sequences.GtoMolarConc(ProteinConc,protein_mw)
	
	// make a new amount
	s = wunit.NewAmount(submolarconc,"M")
	
	// use michaelis menton equation
	v_protein := ((s.SIValue()*Vmax)/(s.SIValue()+km.SIValue()))
	
	
	
	// print report
	Status = fmt.Sprintln(
	"Rate, V of enzyme at substrate conc", S, Sunit,
	"of enzyme with Km", km.ToString(), 
	"and Vmax", Vmax, Vmaxunit,
	"=", V, Vunit,".",
	"Substrate =", Substrate_name,". We have", SubstrateVol.ToString(), "of", Substrate_name, "at concentration of", SubstrateConc.ToString(),
	"Therefore... Moles of", Substrate_name, "=", submoles, "Moles.",
	"Molar Concentration of", Substrate_name, "=", submolarconc, "Mol/L.",
	"Rate, V = ",v_substrate_name, Vmaxunit,
	"Substrate =","DNA Sequence of", Gene_name, "We have", "concentration of", DNAConc.ToString(),
	"Therefore... Molar conc", "=", dnamolarconc, "Mol/L",
	"Rate, V = ",v_dna, Vmaxunit,
	"Substrate =","protein from DNA sequence", Gene_name,".", 
	"We have", "concentration of", ProteinConc.ToString(),
	"Therefore... Molar conc", "=", proteinmolarconc, "Mol/L",
	"Rate, V = ",v_protein, Vmaxunit)
}

// Actions to perform after steps block to analyze data
Analysis {

}

Validation {

}
